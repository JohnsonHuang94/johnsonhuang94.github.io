(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{376:function(e,n,t){"use strict";t.r(n);var r=t(45),o=Object(r.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"mock-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mock-js"}},[e._v("#")]),e._v(" Mock.js")]),e._v(" "),t("p",[e._v("在日常开发中，前后端分离已是常态，前端攻城师独立于后台开发是非常有必要的，mock.js就是一款常用的拦截ajax请求，生成随机数据的工具，用于模拟接口返回数据。下面讲解如何在项目中使用它。")]),e._v(" "),t("p",[e._v("首先我们来看一下目录结构（vue项目）"),t("br"),e._v(" "),t("img",{attrs:{src:"/images/vue/mock_mljg.png",alt:"项目目录结构"}})]),e._v(" "),t("p",[e._v("安装mock")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm install mockjs -D\n")])])]),t("p",[e._v("在mock文件夹下面新建一个"),t("code",[e._v("index.js")]),e._v("和"),t("code",[e._v("user.js")]),t("br"),e._v(" "),t("code",[e._v("index.js")]),e._v("代码如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import Mock from 'mockjs'\n// 设置 300-600ms 的延时，模拟接口的延时\nMock.setup({\n    timeout: '300-600'\n});\n\nlet configArray = [];\n\n// 使用webpack的require.context()遍历所有mock文件\n// require.context( 文件夹目录， 是否遍历文件夹， 匹配文件后缀 )\nconst files = require.context('.', true, /\\.js$/);\nconsole.log('files', files)\nfiles.keys().forEach((key) => {\n  if (key === './index.js') return;\n  configArray = configArray.concat(files(key).default);\n});\n\n// 注册所有的mock服务\nconfigArray.forEach((item) => {\n  // Object.entries() 返回可枚举属性的键值对数组\n  // eg: let o = { a: 1, b: { c: 2 }}\n  //      Object.entries(o)  =>   [[a, 1], [b, {c:2}]]\n  for (let [path, target] of Object.entries(item)) {\n    let protocol = path.split('|');\n    // 匹配接口\n    console.log('mock_url', new RegExp('^' + protocol[1]))\n    // 请求方式\n    console.log('mock_type', protocol[0]) \n    // 返回相应的template或者 执行相应的function，并返回数据\n    console.log('mock_temp_or_func', target)\n    Mock.mock(new RegExp('^' + protocol[1]), protocol[0], target);\n  }\n});\n")])])]),t("p",[e._v("其中Mock.mock是mock.js提供的接口，用法如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// rurl => 需要拦截的接口url，可选参数\n// rtype => 请求方式（get、post、delete等等），可选参数\n// template | function => 返回的模板 | 执行相应的函数，并且返回相应的模板\n\nMock.mock( rurl?, rtype?, template|function )\n")])])]),t("p",[t("code",[e._v("user.js")]),e._v("代码如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/******************\n * 基础 - 用户信息 - mock\n *****************/\n// 用户信息\nlet user = {\n    "code":0,\n    "msg":"",\n    "data":{\n        "given_name":"星星",\n        "first_name":"周",\n        "phone":"159****3622",\n        "email":"***@163.com",\n        "qq":"123456588",\n        "cover":"http://cdn.your-domain-name.com/img/5f15901f5e3.png@!tiny",\n        "number":90649107,\n        "bind_wechat":0,\n        "full_name":"周星星",\n        "province":"香港",\n        "province_id":5687,\n        "city":"中西区",\n        "city_id":5688,\n        "area":"中西区",\n        "area_id":89299,\n    }\n}\nexport default {\n    /**\n     * 基础 - 登录\n     * @param： {}    \n     * @returns：Promise {<pending>}\n     **/\n    \'post|/user/center\': () => {\n        return user\n    }\n}\n')])])]),t("p",[e._v("这样我们就已经编写好mock文件了，接下来需要在main.js中引入mock文件")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 开发模式下才引入mock\nprocess.env.NODE_ENV === 'development' && require('./mock') \n")])])]),t("p",[e._v("接下来，当我们在组件页面中请求了"),t("code",[e._v("/user/center")]),e._v("时，mock就会主动拦截请求，并返回我们定义好的template数据")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import axios from 'axios'\n\naxios.post('/user/center').then( res => {\n    console.log(res)\n})\n")])])]),t("p",[e._v("这里有一个细节需要注意，由于请求被mock拦截了，所以我们在NetWork里面是找不到这个请求的，可以通过在控制台将数据打印出来进行验证："),t("br"),e._v(" "),t("img",{attrs:{src:"/images/vue/mock_network.jpg",alt:"network查看请求"}}),t("br"),e._v(" "),t("img",{attrs:{src:"/images/vue/mock_console.jpg",alt:"控制台打印"}})]),e._v(" "),t("p",[e._v("##参考")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/nuysoft/Mock/wiki/Getting-Started",target:"_blank",rel:"noopener noreferrer"}},[e._v("Github"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/c5568910e946",target:"_blank",rel:"noopener noreferrer"}},[e._v("简书文章"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=o.exports}}]);